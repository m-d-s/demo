Name: Michael Simpson
Date: 05-15-15
Course: 322
Assignment: #3


1)

2)

3)
    One way that the source program could have differed from my reverse engineered copy
could be the variable names. In assembly there are no references to local variable names
so the names that were initially used could very well be wildly different than the (admittedly
non creative) ones that I came up with. Also any difference in whitespace or comments between
the original and reconstructed code could never be determined by only analyzing the machine
generated assembly.

    There were a few places in the generated code that loaded constant values into a register
before using that register to evaluate and expression. This could have been done by directly
using the constant value rather than loading it into a register before hand.

    There were some other places where the code was incrementing the value of a variable,
but instead of using the 'incl' instruction it would load the constant '1' into a register,
then load the value of a local variable into another register and perform an 'addl'. This
would could be improved by two instructions if you simply did 'incl -8(%rsp)' for instance.

    Before doing a comparison between two values, the generated code always loads values
(either offset from the stack pointer, or in other registers) into new registers and then 
does a comparison on those registers. The same effect could be achieved without storing
these values into new registers.
